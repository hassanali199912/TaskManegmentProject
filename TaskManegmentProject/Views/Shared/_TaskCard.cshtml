@using TaskManegmentProject.DBcontcion
@using System.Text.Json;

@model MyTask
@{
    var taskDTO = new
    {
        Title = Model.Title,
        Description = Model.Description,
        Status = Model.Status.ToString(),
        Priority = Model.Priority.ToString()
    };


    
}

<div class="col-lg-3 col-md-6 col-sm-12 col-12 p-1">
    <div class="task-card card">
        <div class="task-card-content-container">
            <h3>@Model.Title</h3>
            <p>@Model.Description</p>
        </div>
        <div class="task-card-container">
            <h6>@Model.CreatedAt</h6>
            <div class="task-card-footer">

                @if (Model.Status == TaskManegmentProject.Enums.TaskStatus.Pending)

                {
                    <button class="state-btn btn warning" data-task-id="@Model.Id" onclick="changeStatus('@Model.Id')">
                        @Model.Status
                    </button>
                }

                else if (Model.Status == TaskManegmentProject.Enums.TaskStatus.InProgress)

                {
                    <button class="state-btn btn danger" data-task-id="@Model.Id" onclick="changeStatus('@Model.Id')">
                        @Model.Status
                    </button>
                }

                else

                {
                    <button class="state-btn btn success" disabled data-task-id="@Model.Id">
                        @Model.Status
                    </button>
                }

                <div class="control-buttons">
                    @if (Model.AssignTo != null && Model.AssignUser != null)

                    {
                        <div class="task-card-content-members" onclick="toggleMemberCard(this)">
                            <div class="members-div">
                                <img src="@(Model.AssignUser?.ImageUrl ?? "/img/avatar-images/avatar-2.jpeg")" alt="@Model.AssignUser?.Name">
                            </div>
                            <div class="display-members">
                                <ul class="members-list">
                                    <li>
                                        <img src="@(Model.AssignUser?.ImageUrl ?? "/img/avatar-images/avatar-2.jpeg")" alt="@Model.AssignUser?.Name">
                                        <p>@Model.AssignUser?.Name</p>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    }
                    <a asp-controller="Task" asp-action="edit" asp-route-id="@Model.Id">
                        <i class="fa fa-edit"></i>
                    </a>
                    <a asp-controller="Task" asp-action="DeleteTask" asp-route-taskId="@Model.Id">
                        <i class="fa fa-trash"></i>
                    </a>
                        
                    <button onclick='openTaskDetails(@JsonSerializer.Serialize(taskDTO))'>
                        <i class="fa-solid fa-eye"></i>
                    </button>

                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function toggleMemberCard(e) {
        let el = e.querySelector(".display-members");
        if (el.classList.contains("active")) {
            el.classList.remove("active");
        } else {
            closeAllDisplayMembers();
            el.classList.add("active");
        }
    }

    function closeAllDisplayMembers() {
        let allDiv = document.querySelectorAll(".display-members");
        allDiv.forEach(item => {
            item.classList.remove("active");
        });
    }
</script>
<script src="/microsoft-signalr/signalr.min.js"></script>

<script>

    const Newhub = new signalR.HubConnectionBuilder()
        .withUrl("/statusHub")
        .build();

    Newhub.start().then(function () {
        console.log("starting connection...");
    }).catch(function (err) {
        console.error("SignalR connection failed: ", err);
    });

    function changeStatus(taskId) {
        console.log(`Task ID clicked: ${taskId}`);
        Newhub.invoke("ChangeTaskStatus", taskId);
    }

    Newhub.on("TaskStatusChanged", function (Id, newStatus) {
        try {
            console.log(`TaskStatusChanged received for task ID: ${Id}, new status: ${newStatus}`);

            let statusClass = newStatus === "Pending" ? "warning" :
                newStatus === "InProgress" ? "danger" :
                    "success";

            let disabledAttr = newStatus === "Compleated" ? "disabled" : "";

            let newButton = `
                    <button id="task-button-${Id}"
                            class="state-btn btn ${statusClass}"
                            ${disabledAttr}
                            data-task-id="${Id}"
                            onclick="changeStatus('${Id}')">
                        ${newStatus}
                    </button>
                `;

            $(`[data-task-id="${Id}"]`).replaceWith(newButton);

        } catch (error) {
            console.error("Error in TaskStatusChanged handler:", error);
        }
    });


</script>
